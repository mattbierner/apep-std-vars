{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE5B,IAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,GAAG;QAAC,KAAK,yDAAG,EAAE;WACzC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;AACjB,eAAO,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE;AAClC,uBAAe,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,aAAa,EAAE;AAClD,eAAO,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE;KACrC,CAAC;CAAA;;;;;;;AAAC,AAQP,QAAQ,CAAC,KAAK,GAAG,UAAC,IAAI;WAClB,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC;CAAA;;;;;;;;;;;;;;;;;AAAC,AAiB7B,QAAQ,CAAC,aAAa,GAAG,UAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAK;AAChD,QAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAC1B,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,EAC5B,UAAA,GAAG;eACC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAAA,CAAC,CAAC;;AAEnD,WAAO,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CACrB,KAAK,CAAC,UAAA,CAAC;eACJ,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,SAAS,GAAG,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAAA,CAAC,CAAC;CACtE;;;;;;;;;;;;;;AAAC,AAcF,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAC7C,UAAC,CAAC,EAAE,CAAC;WAAK,CAAC,GAAG,CAAC;CAAA,EACf,EAAE,CAAC,CAAC","file":"index.js","sourcesContent":["\"use strict\";\nconst pep = require('apep');\n\nconst pep_vars = module.exports = (proto = {}) =>\n    Object.create(proto, {\n        'clear': { value: pep_vars.clear },\n        'storeCombined': { value: pep_vars.storeCombined },\n        'store': { value: pep_vars.store }\n    });\n\n\n/**\n    Clear the value of a variable.\n    \n    @param name Variable name.\n*/\npep_vars.clear = (name) =>\n    pep.set(name, undefined);\n\n/**\n    Get the currently stored value of a variable or compute it with a generator.\n\n    Yields the result value.\n\n    @param f Accumulator function to reduce multiple yields from `generator` to\n        a single value.\n    @param z Initial value for accumulator.\n    @param name Variable name.\n    @param generator Generator run to produce the value.\n\n    The function always stores value as strings. The output of multiple\n    yielding generators are joined together into a single string value which \n    is yielded once.\n*/\npep_vars.storeCombined = (f, z, name, generator) => {\n    const computeValue = pep.chain(\n        pep.combine(f, z, generator),\n        val =>\n            pep.seq(pep.set(name, val), pep.lit(val)));\n    \n    return pep.get(name, null)\n        .chain(x =>\n            x === null || x === undefined ? computeValue : pep.lit(x));\n};\n\n/**\n    Get the currently stored value of a variable or compute it with a generator.\n\n    Yields the result value.\n\n    @param name Variable name.\n    @param generator Generator run to produce the value.\n\n    The function always stores value as strings. The output of multiple\n    yielding generators are joined together into a single string value which \n    is yielded once.\n*/\npep_vars.store = pep_vars.storeCombined.bind(null,\n    (p, c) => p + c,\n    '');\n\n"],"sourceRoot":"/source/"}